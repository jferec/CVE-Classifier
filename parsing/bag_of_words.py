import numpy as np
import sys
from ordered_set import OrderedSet


class BagOfWords:
    def __init__(self, data):
        """
        Tworzy slownik na podstawie zbioru slow
        :param data: zbior slow
        """
        self.word_set = OrderedSet()
        self.word_set.update(OrderedSet(data))


    def append(self, data):
        self.word_set.update(data)


    def num_of_words(self):
        return len(self.word_set)

    @classmethod
    def init_from_file(cls, parsed_file_name):
        """
        Otwiera plik i tworzy zbior slow
        :param parsed_file_name: nazwa sparsowanego pliku
        """
        with open('../text_files/' + parsed_file_name, 'r') as parsed_file:
            data = parsed_file.read()
        word_set = set()
        lines = data.splitlines()
        for line in lines:
            word_set = word_set.union(line.split())
        return cls(word_set)

    def get_binary_vectors_from_file(self, input_file_name):
        """
        Dla każdego z rekordow zostaje utworzony wektor.

        :param input_file_name: plik wejsciowy
        :return: Wszystkie wektory dla pliku zapisywane sa w pliku wynikowym
        """
        with open('../text_files/' + input_file_name, 'r') as input_file:
            input_data = input_file.read()
            lines = input_data.splitlines()
        result_list = np.ndarray((len(lines), len(self.word_set)), dtype=int)
        for i, line in enumerate(lines):
            line = line.split()
            single_array = np.zeros((len(self.word_set),), dtype=bool)
            for n, word in enumerate(self.word_set):
                if self.word_set[n] in line:
                    single_array[n] = 1
            result_list[i] = single_array
        np.set_printoptions(threshold=sys.maxsize)
        with open('../text_files/' + 'vector_result.txt', 'w') as output:
            output.write(str(result_list))
        return result_list

    def get_binary_vectors(self, document):
        """
        Dla każdego z rekordow zostaje utworzony wektor.

        :param input_file_name: plik wejsciowy
        :return: Wszystkie wektory dla pliku zapisywane sa w pliku wynikowym
        """

        result_list = np.ndarray((len(document), len(self.word_set)), dtype=int)
        for i, doc in enumerate(document):
            line = doc["sentence"].split()
            single_array = np.zeros((len(self.word_set),), dtype=bool)
            for n, word in enumerate(self.word_set):
                if self.word_set[n] in line:
                    single_array[n] = 1
            result_list[i] = single_array
        np.set_printoptions(threshold=sys.maxsize)
        with open('../text_files/' + 'vector_result2.txt', 'w') as output:
            output.write(str(result_list))
        return result_list

